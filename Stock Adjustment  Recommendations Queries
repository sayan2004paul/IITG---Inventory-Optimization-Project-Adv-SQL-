Question 1:
Write a solution to identify the top 5 products that are most overstocked. For each product, calculate the overstock as (Inventory Level – Units Sold). Rank the products in descending order of overstock quantity.


WITH filtered_data AS (
    SELECT *
    FROM final_fact f
     JOIN 
      dim_cat c  USING(cat_id)
    WHERE Date >= DATE_SUB('2024-01-01', INTERVAL 6 MONTH)
),

product_overstock AS (
    SELECT 
        Product_ID,
        Category,
        SUM(Inventory_Level) AS total_inventory,
        SUM(Units_Sold) AS total_units_sold,
        (SUM(Inventory_Level) - SUM(Units_Sold)) AS overstock_amount
    FROM filtered_data
    GROUP BY Product_ID, Category
),

ranked_overstock AS (
    SELECT 
        *,
        DENSE_RANK() OVER (ORDER BY overstock_amount DESC) AS overstock_rank
    FROM product_overstock
)

SELECT 
    Product_ID,
    Category,
    total_inventory,
    total_units_sold,
    overstock_amount,
    overstock_rank
FROM ranked_overstock
WHERE overstock_rank <= 5
ORDER BY overstock_rank;


~This query calculates overstock for each product as the difference between total inventory and units sold over the last six months.
~It uses aggregation to sum inventory and sales, then ranks products by overstock amount using the DENSE_RANK() window function. 
~Finally, it returns the top 5 products with the highest overstock, helping identify excess inventory for better stock management.










Q2) Write a solution to find products where units ordered were significantly higher than units sold. For each product, 
calculate the excess order amount as (Units Ordered – Units Sold) and identify the top 5




WITH filtered_data AS (
    SELECT *
    FROM final_fact f
     JOIN 
      dim_cat c  USING(cat_id)
    WHERE Date >= DATE_SUB('2024-01-01', INTERVAL 6 MONTH)
),

product_excess AS (
    SELECT 
        Product_ID,
        Category,
        SUM(Units_Ordered) AS total_units_ordered,
        SUM(Units_Sold) AS total_units_sold,
        (SUM(Units_Ordered) - SUM(Units_Sold)) AS excess_amount
    FROM filtered_data
    GROUP BY Product_ID, Category
),

ranked_excess AS (
    SELECT 
        *,
        DENSE_RANK() OVER (ORDER BY excess_amount DESC) AS excess_rank
    FROM product_excess
)

SELECT 
    Product_ID,
    Category,
    total_units_ordered,
    total_units_sold,
    excess_amount,
    excess_rank
FROM ranked_excess
WHERE excess_rank <= 5
 AND total_units_ordered > total_units_sold
ORDER BY excess_rank DESC;


~This query identifies the top 5 products where units ordered significantly exceed units sold in the past six months. 
~It filters and joins sales and category data, then aggregates total units ordered and sold per product. 
~The excess order amount is calculated as the difference between units ordered and units sold. 
~Using DENSE_RANK(), products are ranked by this excess, and only those with more orders than sales are selected, highlighting products with potentially overestimated demand or inventory issues.










Q3) Write a solution to calculate the reorder mismatch rate for each product. The mismatch rate is defined as (ABS(Units Ordered – Units Sold) / Units Ordered). Return the top 5 products with the highest mismatch rate.



WITH filtered_data AS (
    SELECT *
    FROM final_fact f
     JOIN 
      dim_cat c  USING(cat_id)
    WHERE Date >= DATE_SUB('2024-01-01', INTERVAL 6 MONTH)
),

mismatch_rate AS (
    SELECT 
        Product_ID,
        Category,
        SUM(Units_Ordered) AS total_units_ordered,
        SUM(Units_Sold) AS total_units_sold,
     ROUND(
    ABS(SUM(Units_Ordered) - SUM(Units_Sold)) * 100.0 / NULLIF(SUM(Units_Ordered), 0),
    2
) AS mismatch_rate
    FROM filtered_data
    GROUP BY Product_ID, Category
),

ranked_mismatch AS (
    SELECT 
        *,
        DENSE_RANK() OVER (ORDER BY mismatch_rate DESC) AS mismatch_rank
    FROM mismatch_rate
)

SELECT 
    Product_ID,
    Category,
    total_units_ordered,
    total_units_sold,
    mismatch_rate,
    mismatch_rank
FROM ranked_mismatch
WHERE mismatch_rank <= 5
ORDER BY mismatch_rank ;







~This query calculates the reorder mismatch rate for each product over the last six months, 
~defined as the absolute difference between units ordered and units sold divided by units ordered (expressed as a percentage).
~It filters and aggregates the relevant data, ensuring no division by zero with NULLIF.
~The mismatch rates are ranked using DENSE_RANK(), and the query returns the top 5 products with the highest mismatch rates,
~highlighting items with significant ordering vs. sales discrepancies for better inventory adjustment.
