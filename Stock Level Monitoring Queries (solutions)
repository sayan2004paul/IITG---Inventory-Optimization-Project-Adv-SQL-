                                    ~  Stock Level Monitoring Queries (Code Documentation) ~ 










1."What is the total inventory count per product category, and how is it distributed across warehouse regions?"
• Purpose: Identify which categories dominate inventory and regional distribution 







A ) Total Inventory count per product category 

~ This query calculates the total inventory available for each product category across all locations.
~ It helps identify which product categories have the highest stock volume, enabling better planning for promotions, storage allocation, and restocking priorities.


SELECT 
 f.cat_id, c.Category,SUM(f.Inventory_Level ) AS total_inventory 
 FROM final_fact f 
  JOIN 
   dim_cat c 
    USING(cat_id)
     GROUP BY 
        f.cat_id, c.Category
         ORDER BY 
           SUM(f.Inventory_Level )  DESC;



~ This query performs an inner join between the inventory fact table (final_fact) and the category dimension (dim_cat) using cat_id.
~ It aggregates inventory levels by category and orders the results by total stock in descending order.










B )  Total Inventory count per category across regions 


 ~ This query breaks down the inventory count by both product category and region, offering a detailed view of regional stock distribution.
 ~ It supports regional inventory balancing, warehouse planning, and helps detect disparities in stock levels across geographic zones.


 
 SELECT 
 f.cat_id, c.Category,r.Region,SUM(f.Inventory_Level ) AS total_inventory 
 FROM final_fact f 
  JOIN 
   dim_cat c ON f.cat_id=c.cat_id
    JOIN dim_regions r ON f.reg_id=r.Reg_id
     GROUP BY 
        f.cat_id, c.Category,r.Region
         ORDER BY 
          Region ,Category , SUM(f.Inventory_Level ) DESC



~ This query joins final_fact with both dim_cat (on cat_id) and dim_regions (on reg_id).
~ It groups data by category and region, calculates total inventory, and orders the output for clear regional comparison.











2.Fast vs. Slow-Moving Products

"Which products have the highest and lowest sales-to-inventory ratios (indicating fast/slow movers)?"
• Purpose: Spot potential overstocks (low ratio) and stockout risks (high ratio).



A )  BASED ON PRODUCT_ID 

~ Calculates the stocking ratio (units sold ÷ inventory level) for each product.
~ Products with high ratios are fast-moving and at risk of stockouts, while those with low ratios may indicate overstocking or poor demand.





WITH CTE AS (Select 
 Product_ID , (SUM(Units_Sold)/SUM(Inventory_Level)) AS stocking_ratio
FROM 
 final_fact 
  GROUP BY 
   Product_ID)
   
   SELECT 
    Product_ID , stocking_ratio,
     CASE 
      WHEN stocking_ratio>=(SELECT AVG(stocking_ratio) FROM CTE ) THEN 'fast-movers'
       WHEN stocking_ratio<(SELECT AVG(stocking_ratio) FROM CTE ) THEN 'slow-movers'
        END AS stock_category
         FROM CTE 
           ORDER BY 
           stocking_ratio DESC



~ A Common Table Expression (CTE) aggregates total Units_Sold and Inventory_Level by Product_ID, calculating the stocking ratio.
 ~ A CASE statement then compares each product’s ratio to the average ratio across all products to label them as 'fast-movers' or 'slow-movers'.
  ~ Results are sorted in descending order of the ratio for clear prioritization.








B) BASED ON PRODUCT CATEGORY 

~ Evaluates inventory efficiency at the category level, helping guide category-level purchasing, markdowns, or promotional strategies.



WITH CTE AS (Select 
  c.Category , (SUM(f.Units_Sold)/SUM(f.Inventory_Level)) AS stocking_ratio
FROM 
 final_fact f 
  JOIN dim_cat c USING(cat_id)
  GROUP BY 
   c.Category)
   
   SELECT 
	 Category , stocking_ratio,
     CASE 
      WHEN stocking_ratio>=(SELECT AVG(stocking_ratio) FROM CTE ) THEN 'fast-movers'
       WHEN stocking_ratio<(SELECT AVG(stocking_ratio) FROM CTE ) THEN 'slow-movers'
        END AS stock_category
         FROM CTE 
          ORDER BY 
            stocking_ratio DESC




~ Joins final_fact with dim_cat to group data by Category.
 ~ The CTE calculates each category’s stocking ratio (total sales ÷ total inventory).
  ~ Uses a CASE logic to benchmark against the average category ratio, classifying each as a fast or slow mover.
   ~ Sorted by stocking ratio to highlight the most and least efficient categories.














3. Basic Stockout Detection
"Which products currently have inventory levels below forecast  (immediate restock candidates)?"
 • Purpose: Flag urgent replenishment needs.



~ Flags products whose latest inventory level is below forecasted demand, indicating they are urgent restock candidates. 
~ This enables timely replenishment and prevents revenue loss due to stockouts.




WITH ranked_inventory AS (
  SELECT 
    Product_ID,
    Inventory_Level,Demand_Forecast,
    Date,
    ROW_NUMBER() OVER (PARTITION BY Product_ID ORDER BY Date DESC) AS rn
  FROM 
    final_fact
),CTE1 AS (
SELECT 
  Product_ID,
  Inventory_Level,
   Demand_Forecast,
  Date
FROM 
  ranked_inventory
WHERE 
  rn = 1)
   SELECT 
  Product_ID ,
  Inventory_Level,
   Demand_Forecast,(Inventory_Level-Demand_Forecast) AS diff 
    FROM CTE1
     WHERE 
      Inventory_Level<Demand_Forecast





~ A window function (ROW_NUMBER) is used to isolate the most recent inventory record per product.
~ The latest Inventory_Level is compared with Demand_Forecast.
~ Products where Inventory_Level < Demand_Forecast are selected for restocking.






A)  Potential chances of stockout (diff<avg_diff):




~ Identifies products where the gap between inventory and forecast (diff) is below a predefined average threshold (e.g., 128.86). 
~ These products may not be out of stock yet, but are approaching critical levels and need monitoring.




WITH ranked_inventory AS (
  SELECT 
    Product_ID,
    Inventory_Level,Demand_Forecast,
    Date,
    ROW_NUMBER() OVER (PARTITION BY Product_ID ORDER BY Date DESC) AS rn
  FROM 
    final_fact
),CTE1 AS (
SELECT 
  Product_ID,
  Inventory_Level,
   Demand_Forecast,
  Date
FROM 
  ranked_inventory
WHERE 
  rn = 1)
   SELECT 
  Product_ID ,
  Inventory_Level,
   Demand_Forecast,(Inventory_Level-Demand_Forecast) AS diff 
    FROM CTE1
     WHERE 
      (Inventory_Level-Demand_Forecast)<128.86 




~ Builds on the same logic as Query 1 using the latest record per product.
~ Computes the difference (Inventory_Level - Demand_Forecast) and filters records below a set threshold, identifying early signals of potential stockout.



















      
4. Regional Stock Comparisons
 "How does average inventory level compare between North, South, East, and West warehouses?"
 • Purpose: Reveal imbalances in regional stocking strategies.




 A)  Region wise avg_inventory 



~ Shows the average inventory held in each major region (North, South, East, West),
   helping assess whether stock is evenly distributed or over/under-stocked in specific regions.



SELECT 
    r.Region,
     AVG(f.Inventory_Level) AS avg_inv
  FROM 
    final_fact f 
     JOIN 
      dim_regions r ON f.Reg_id=r.Reg_id
  GROUP BY 
      r.Region


~ Joins final_fact with dim_regions using Reg_id.
 ~ Groups by region and computes the average Inventory_Level, giving a macro-level view of inventory distribution by region.




B)  Region and store wise avg_inventory 

~ Adds store-level granularity to the regional view, identifying specific stores that are over- or understocked within a region. 
 ~ This can support local redistribution or restocking decisions.







SELECT 
 r.Region,f.Store_ID,AVG(f.Inventory_Level)  AS avg_inv
FROM 
 final_fact f 
  JOIN 
   dim_regions r 
    USING(Reg_ID)
     GROUP BY 
       r.Region,f.Store_ID
        ORDER BY 
         Region , avg_inv DESC




~ Uses the same join between final_fact and dim_regions.
~ Groups data by both Region and Store_ID, and calculates the average inventory per store.
~ Results are ordered to highlight inventory distribution patterns within each region.















5. Inventory Age Tracking
"Which products have been in inventory for the longest time without being sold?"
• Purpose: Highlight stagnant inventory for clearance decisions.



~ Determines how many days have passed since each product was last sold.
 ~ Products with the longest inactivity are stuck in inventory and could be targets for clearance to free up space and working capital.



WITH last_sold_date AS (
  SELECT 
    Product_ID,
    MAX(Date) AS Last_Sold_Date
  FROM final_fact
  WHERE Units_Sold > 0
  GROUP BY Product_ID
),
latest_inventory AS (
  SELECT 
    Product_ID,
    MAX(Date) AS Latest_Date
  FROM final_fact
  GROUP BY Product_ID
)
SELECT 
  li.Product_ID,
  li.Latest_Date,
  ls.Last_Sold_Date,
  DATEDIFF(li.Latest_Date, ls.Last_Sold_Date) AS Days_Without_Sale
FROM 
  latest_inventory li
LEFT JOIN 
  last_sold_date ls ON li.Product_ID = ls.Product_ID
ORDER BY 
  Days_Without_Sale DESC;




~ Uses two CTEs:
 ~last_sold_date: Gets the most recent sale date (Units_Sold > 0) per product.
 ~latest_inventory: Gets the latest available record per product.
  ~Joins both to calculate the difference in days since last sale using DATEDIFF().
   ~ Results are sorted to bring attention to longest unsold products.







A)  Products unsold for >30 days, grouped by category to spot dead-stock patterns -



~ Identifies product categories with items unsold for more than 30 days, helping isolate dead stock trends at the category level for strategic clearance planning.




WITH last_sold AS (
  SELECT 
    Product_ID,
    MAX(Date) AS Last_Sold_Date
  FROM final_fact
  WHERE Units_Sold > 0
  GROUP BY Product_ID
),
latest_inventory_info AS (
  SELECT 
    f1.Product_ID,
    c.Category,
    MAX(f1.Date) AS Latest_Date
  FROM final_fact f1
   JOIN dim_cat c USING(cat_id)
  GROUP BY f1.Product_ID, c.Category
),
inventory_age AS (
  SELECT 
    li.Product_ID,
    li.Category,
    ls.Last_Sold_Date,
    li.Latest_Date,
    DATEDIFF(li.Latest_Date, ls.Last_Sold_Date) AS Days_Unsold
  FROM last_sold ls
  JOIN latest_inventory_info li ON ls.Product_ID = li.Product_ID
)
SELECT 
  Category,
  COUNT(Product_ID) AS Dead_Stock_Count,
  GROUP_CONCAT(Product_ID) AS Product_List
FROM inventory_age
WHERE Days_Unsold > 30
GROUP BY Category
ORDER BY Dead_Stock_Count DESC;




~ Joins product inventory and category data.
 ~ Filters products with no sales in over 30 days using DATEDIFF() > 30.
  ~ Groups the result by category and lists affected Product_IDs using GROUP_CONCAT() for clarity.
   ~ Highlights which categories contribute most to dead stock, even though currently, no products meet the condition.






6.  Cross-Region Inventory Imbalance
"Which SKUs are overstocked in one region but understocked in another, requiring inter-warehouse transfers?"



~ Detects cases where the same SKU is overstocked in one region and understocked in another, 
  ~ revealing opportunities for logistics optimization through internal transfers rather than new procurement.





WITH CTE AS (SELECT 
 r.Region ,f.Product_ID, SUM(f.Inventory_Level) as total_stock
FROM 
 dim_regions r 
  JOIN final_fact f USING(Reg_id)
   GROUP BY 
    r.region ,f.Product_ID
     ORDER BY r.Region)
     
     SELECT *
      FROM 
       CTE a 
        JOIN 
         CTE b ON a.Product_ID=b.Product_ID AND 
          a.Region!=b.Region



~ A CTE calculates the total inventory per Product_ID for each Region.
 ~ A self-join is performed on the CTE to pair up the same product across two different regions.
  ~While this setup flags potential imbalance, additional logic (e.g., comparing total_stock values across regions) should be added to differentiate overstock vs understock scenarios.


















7.  Dynamic Safety Stock Calculator
"What is the optimal safety stock level per SKU, considering demand variability and lead time?"
• Uses: Statistical functions (STDDEV, AVG) + conditional thresholds.(assuming the lead time is 7 days )



~ Calculates an optimal safety stock level for each SKU based on demand variability (std. dev. of sales) and a lead time of 7 days, using a 95% service level (z-score = 1.65).
 ~ This ensures that each product maintains a buffer stock to absorb demand fluctuations and reduce the risk of stockouts.



SELECT 
  Product_ID,
  ROUND(1.65 * STDDEV(Units_Sold) * SQRT(7), 2) AS Safety_Stock_Level
FROM 
  final_fact
GROUP BY 
  Product_ID;


~ Aggregates sales data (Units_Sold) per Product_ID.
 ~ Applies the safety stock formula:
   ~ Safety Stock = Z * σ * √LeadTime
     ~ where Z = 1.65 (95% service level), σ = STDDEV of sales.
~Uses ROUND() for readability and GROUP BY to calculate per SKU.





A)   "Which stores have the most SKUs with inventory levels below their demand forecast?"



~ Flags store-SKU records for calendar year 2024 where current inventory is below demand forecast,
 ~ indicating potential stockout risks that require urgent replenishment or reallocation.




SELECT 
 Store_ID, Inventory_Level, Demand_Forecast
FROM 
 final_fact 
  WHERE 
   YEAR(Date)=2024 AND 
    Inventory_Level<Demand_Forecast





~ Filters records where Inventory_Level < Demand_Forecast.
 ~ Restricts the dataset to YEAR(Date) = 2024.
  ~ Retrieves Store_ID, Inventory_Level, and Demand_Forecast to support store-level diagnostics and restock decisions.
