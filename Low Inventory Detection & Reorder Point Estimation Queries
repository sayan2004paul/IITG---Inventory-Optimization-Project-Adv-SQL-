                                         ~ Low Inventory Detection & Reorder Point Estimation Queries  ~


1) 	What is the current inventory level for each product (SKU) across all stores?
    Purpose: Build the baseline view of inventory quantity by Product_ID and Store_ID.




WITH ranked_inventory AS (
  SELECT 
    Product_ID,Store_ID,
    Inventory_Level,Demand_Forecast,
    Date,
    ROW_NUMBER() OVER (PARTITION BY Product_ID ORDER BY Date DESC) AS rn
  FROM 
    final_fact
)
SELECT 
 Date ,
   Store_ID  ,Product_ID ,  Inventory_Level

FROM 
  ranked_inventory
WHERE rn=1
 ORDER BY Inventory_Level DESC


~ This query retrieves the most recent inventory record for each product by assigning row numbers (ROW_NUMBER) partitioned by Product_ID and ordered by Date descending. 
~ It filters for the latest entry (rn = 1) and ranks stores by current Inventory_Level in descending order, supporting inventory optimization analysis.






 



2) Which products currently have inventory below a fixed reorder point threshold (30 % of Avg Inventory Level)?
   Purpose: Identify simple low-inventory candidates using a static threshold.




WITH ranked_inventory AS (
  SELECT 
    Product_ID,Store_ID,
    Inventory_Level,Demand_Forecast,
    Date,
    ROW_NUMBER() OVER (PARTITION BY Product_ID ORDER BY Date DESC) AS rn
  FROM 
    final_fact
)
SELECT 
Date,Product_ID ,Inventory_Level
  FROM 
   ranked_inventory
     WHERE 
      Inventory_Level<(0.3*256)
       AND rn=1
   



~ This SQL script identifies low-stock products based on the latest inventory data. 
~ It uses a Common Table Expression (CTE) ranked_inventory to assign row numbers to inventory records partitioned by Product_ID and ordered by Date descending, ensuring the most recent record is selected (rn = 1). 
~ The final SELECT filters products whose Inventory_Level is below 30% of the threshold value (i.e., less than 76.8, from 0.3 * 256), indicating potential stockout risk.
~ This logic supports proactive inventory replenishment and demand planning.














3) What is the reorder point for each SKU, calculated as the average daily demand over the past 30 days multiplied by the lead time (e.g., 7 days)?
   Purpose: Estimate a dynamic reorder point based on moving average demand.


WITH past_30_days AS (
  SELECT 
    Product_ID,
    SUM(Units_Sold) AS total_units,
    COUNT(DISTINCT Date) AS active_days,
    SUM(Units_Sold)/COUNT(DISTINCT Date) AS avg_daily_demand
  FROM final_fact
  WHERE Date >= '2024-01-01' - INTERVAL 30 DAY
  GROUP BY Product_ID
) 
  ,reorder AS ( SELECT 
    Product_ID,
    avg_daily_demand,
    7 AS lead_time_days,
    ROUND(avg_daily_demand * 7, 2) AS reorder_point
  FROM past_30_days
  ),
  latest_inventory AS (
  SELECT 
    Product_ID,
    SUM(Inventory_Level) AS total_inv
  FROM final_fact
  WHERE Date = (SELECT MAX(Date) FROM final_fact)
   GROUP BY 
    Product_ID
)
SELECT 
  r.Product_ID,
  r.avg_daily_demand,
  r.reorder_point,
  l.total_inv
FROM reorder r
JOIN latest_inventory l ON r.Product_ID = l.Product_ID;

  

~ This query calculates reorder points for products based on recent sales trends and compares them with current inventory levels. It involves three CTEs:

a) past_30_days computes average daily demand per product over the last 30 days using SUM(Units_Sold)/COUNT(DISTINCT Date).
b) reorder estimates the reorder point using the formula: avg_daily_demand × lead_time (7 days), rounded for precision.
c) latest_inventory aggregates current inventory per product as of the most recent date.
d) The final SELECT joins reorder thresholds with current stock levels to support data-driven replenishment decisions.






















4) 	Which SKUs have inventory levels below their dynamically calculated reorder points (per SKU)?
    Purpose: Detect true low-inventory risk based on calculated reorder needs.




WITH past_30_days AS (
  SELECT 
    Product_ID,
    SUM(Units_Sold) AS total_units,
    COUNT(DISTINCT Date) AS active_days,
    SUM(Units_Sold)/COUNT(DISTINCT Date) AS avg_daily_demand
  FROM final_fact
  WHERE Date >= '2024-01-01' - INTERVAL 30 DAY
  GROUP BY Product_ID
) 
  ,reorder AS ( SELECT 
    Product_ID,
    avg_daily_demand,
    7 AS lead_time_days,
    ROUND(avg_daily_demand * 7, 2) AS reorder_point
  FROM past_30_days
  ),
  latest_inventory AS (
  SELECT 
    Product_ID,
    SUM(Inventory_Level) AS total_inv
  FROM final_fact
  WHERE Date = (SELECT MAX(Date) FROM final_fact)
   GROUP BY 
    Product_ID
)
SELECT 
  r.Product_ID,
  r.avg_daily_demand,
  r.reorder_point,
  l.total_inv
FROM reorder r
JOIN latest_inventory l ON r.Product_ID = l.Product_ID
 WHERE 
  l.total_inv<r.reorder_point













5) What is the average demand variability (standard deviation) per SKU, and how can that inform a safety stock buffer?
   Purpose: Incorporate uncertainty into your reorder point formula.





WITH daily_demand AS (
  SELECT 
    Product_ID,
    Date,
    SUM(Units_Sold) AS daily_units_sold
  FROM final_fact
  WHERE Date >= '2024-01-01' - INTERVAL 30 DAY
  GROUP BY Product_ID, Date
),
demand_stats AS (
  SELECT 
    Product_ID,
    AVG(daily_units_sold) AS avg_daily_demand,
    STDDEV(daily_units_sold) AS demand_variability,
    COUNT(DISTINCT Date) AS active_days
  FROM daily_demand
  GROUP BY Product_ID
)
SELECT 
  ds.Product_ID,
  ds.avg_daily_demand,
  ds.demand_variability,
  ds.active_days,
  -- Example safety stock calculation (z-score of 1.65 for 95% service level)
  ROUND(1.65 * ds.demand_variability * SQRT(7), 2) AS safety_stock,
  -- Reorder point calculation
  ROUND((ds.avg_daily_demand * 7) + (1.65 * ds.demand_variability * SQRT(7)), 2) AS reorder_point
FROM demand_stats ds
ORDER BY ds.demand_variability DESC;
  






~ This query identifies products that require restocking by comparing current inventory with dynamically calculated reorder points. It uses:

a) past_30_days CTE to calculate average daily demand per product over the last 30 days.
b) reorder CTE to compute the reorder point assuming a fixed 7-day lead time (avg_daily_demand × 7).
c) latest_inventory CTE to fetch current inventory levels for the latest available date.
d) The final result filters for products where total_inv < reorder_point, flagging items at risk of stockouts and enabling timely replenishment actions.
