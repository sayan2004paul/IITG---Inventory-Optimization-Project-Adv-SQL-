                                          ~ Inventory Turnover Analysis Queries ~



1)  What is the inventory turnover ratio per SKU and store over the last 3/6 months?
  Purpose: Identify fast vs. slow-moving products using the classic formula



A) For last 3 months 


SELECT 
    Store_ID,
    Product_ID,
    SUM(Units_Sold) AS total_units_sold,
    ROUND(AVG(Inventory_Level), 2) AS avg_inventory_level,
    ROUND(SUM(Units_Sold) / NULLIF(AVG(Inventory_Level), 0), 2) AS inventory_turnover_ratio
FROM 
    final_fact
WHERE 
    Date BETWEEN '2023-10-01' AND '2024-01-01'
GROUP BY 
    Store_ID, Product_ID
ORDER BY 
    Store_ID,inventory_turnover_ratio DESC;




~This query calculates inventory turnover ratio for each Store_ID and Product_ID over Q4 2023 by summarizing sales and average inventory levels. 
~It uses aggregation functions like SUM() and AVG(), applies NULL-safe division using NULLIF() to prevent division-by-zero errors, and rounds numerical outputs for clarity.
~It demonstrates analytical skills in KPI calculation, date filtering, grouping, and multi-level sorting.









B) For last 6 months 


SELECT 
    Store_ID,
    Product_ID,
    SUM(Units_Sold) AS total_units_sold,
    ROUND(AVG(Inventory_Level), 2) AS avg_inventory_level,
    ROUND(SUM(Units_Sold) / NULLIF(AVG(Inventory_Level), 0), 2) AS inventory_turnover_ratio
FROM 
    final_fact
WHERE 
    Date BETWEEN '2023-07-01' AND '2024-01-01'
GROUP BY 
    Store_ID, Product_ID
ORDER BY 
    Store_ID,inventory_turnover_ratio DESC;


~This query computes the inventory turnover ratio for each Store_ID and Product_ID over a 7-month period (July 2023 to January 2024). 
~It aggregates total units sold and calculates the average inventory level using SUM() and AVG(). 
~The ratio is safely calculated with NULLIF() to avoid division by zero, and results are rounded for readability. It employs date filtering, grouping, and ordering to rank products by turnover within each store.

















2) Which SKUs have the lowest turnover ratio across all stores and categories?(for last 6 months)
  Purpose: Pinpoint underperforming SKUs locking up capital.


SELECT 
    f.Product_ID AS SKU,
    c.Category,
    f.Store_ID,
    SUM(f.Units_Sold) AS total_units_sold,
    AVG(f.Inventory_Level) AS avg_inventory_level,
    (SUM(f.Units_Sold) / AVG(f.Inventory_Level)) AS inventory_turnover_ratio
FROM 
final_fact f 
 JOIN 
  dim_cat c USING(cat_id)
   WHERE 
        f.Date BETWEEN DATE_SUB('2024-01-01', INTERVAL 6 MONTH) AND '2024-01-01'

 GROUP BY 
    f.Product_ID, c.Category, f.Store_ID
ORDER BY 
	inventory_turnover_ratio ASC;



~This query calculates the inventory turnover ratio by Product_ID (SKU), Category, and Store_ID over the last 6 months before January 2024.
~It performs an INNER JOIN between a fact table and a dimension table (dim_cat) to enrich sales data with product categories. 
~Aggregations SUM() and AVG() compute total units sold and average inventory level, with the turnover ratio calculated as their division.
~The query uses date range filtering, grouping on multiple columns, and orders results ascending by turnover ratio to highlight low-turnover items.









3)  What is the average inventory holding period (in days) per SKU and store?
    Purpose: Translate turnover ratio into business-understandable "stock sits X days" view.





WITH CTE AS (SELECT 
    f.Product_ID AS SKU,
    f.Store_ID,
    (SUM(f.Units_Sold) / AVG(f.Inventory_Level)) AS inventory_turnover_ratio
FROM 
final_fact f 
 JOIN 
  dim_cat c USING(cat_id)
   WHERE 
        f.Date BETWEEN DATE_SUB('2024-01-01', INTERVAL 6 MONTH) AND '2024-01-01'
   GROUP BY 
    f.Product_ID , f.Store_ID
    ORDER BY 
	inventory_turnover_ratio ASC),

    CTE1 AS (
     SELECT 
     Store_ID, SKU , ROUND(183/inventory_turnover_ratio,2) AS holding_period
      FROM   CTE
       ORDER  BY 
        Store_ID , holding_period DESC)
        

        SELECT 
         Store_ID , SKU ,holding_period,
         ( CASE 
  WHEN holding_period <= 2 THEN 'Fast-moving'
  WHEN holding_period > 2 AND holding_period <= 2.2 THEN 'Medium-moving'
  ELSE 'Slow-moving'
END) AS movement_class
 FROM CTE1 
    ORDER  BY 
        Store_ID , holding_period DESC



~This query uses Common Table Expressions (CTEs) to calculate and classify product movement speed by Store_ID and SKU. 
~The first CTE computes the inventory turnover ratio over the last 6 months.
~The second CTE calculates the holding period (days inventory is held) by dividing a fixed period (183 days) by the turnover ratio. 
~Finally, it classifies products into ‘Fast-moving’, ‘Medium-moving’, or ‘Slow-moving’ based on holding period thresholds using a CASE statement. 
~It demonstrates advanced SQL concepts like CTEs, windowing logic, conditional classification, and ordered result sets.









 4) How does inventory turnover vary across product categories and regions?
 Purpose: Spot patterns in product velocity based on category/market traits.





A) Across category 

SELECT 
    c.Category,
  
    ROUND((SUM(f.Units_Sold) * 365.0) / SUM(f.Inventory_Level), 2) AS inventory_turnover_annualized
FROM 
    final_fact f 
	JOIN dim_cat c ON f.cat_id = c.cat_id
    JOIN dim_regions r ON f.Reg_id = r.Reg_id
WHERE 
    f.Date BETWEEN '2023-07-01' AND '2024-01-01'
GROUP BY 
    c.Category
ORDER BY 
    c.Category



~This query calculates the annualized inventory turnover ratio by product Category over a 7-month period (July 2023 to January 2024).
~It aggregates total units sold and inventory levels, then scales the turnover ratio to a yearly basis by multiplying by 365. 
~The query uses JOINs to enrich data with category and regional information, applies date filtering, groups results by category, and orders alphabetically. 
~This showcases skills in data aggregation, time normalization, and multi-table joins.





B) Across regions 





SELECT 
   r.Region,
  
    ROUND((SUM(f.Units_Sold) * 365.0) / SUM(f.Inventory_Level), 2) AS inventory_turnover_annualized
FROM 
    final_fact f 
    JOIN dim_regions r ON f.Reg_id = r.Reg_id
WHERE 
    f.Date BETWEEN '2023-07-01' AND '2024-01-01'
GROUP BY 
    r.Region
ORDER BY 
r.Region






~This query calculates the annualized inventory turnover ratio by Region for the period July 2023 to January 2024.
~It aggregates total units sold and inventory levels, then annualizes the turnover by scaling with 365 days.
~The query uses a JOIN to link sales data with region details, applies date filtering, groups by region, and sorts results alphabetically.
~It demonstrates competency in regional performance analysis, aggregation, and time-based KPI normalization.
