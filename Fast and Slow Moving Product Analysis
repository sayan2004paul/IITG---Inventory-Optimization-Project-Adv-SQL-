Q1) Identify the Top 5 Fast-Moving Products Based on Sales Velocity
Write a solution to find the top 5 fast-moving products based on average units sold per day over the last 6 months.
For each product, calculate the sales velocity as (Total Units Sold / Number of Active Selling Days). Rank products in descending order of sales velocity and return the top 5.

 
 
 
 WITH last_6_months_data AS (
    SELECT 
        Product_ID,
        Date,
        Units_Sold
    FROM final_fact
    WHERE  Date >= DATE_SUB('2024-01-01', INTERVAL 6 MONTH))
,
product_sales_summary AS (
    SELECT
        Product_ID,
        SUM(Units_Sold) AS total_units_sold,
        COUNT(DISTINCT Date) AS active_selling_days,
        SUM(Units_Sold) * 1.0 / NULLIF(COUNT(DISTINCT Date), 0) AS sales_velocity
    FROM last_6_months_data
    GROUP BY Product_ID
)
SELECT 
    Product_ID,
    total_units_sold,
    active_selling_days,
    ROUND(sales_velocity, 2) AS sales_velocity
FROM product_sales_summary
ORDER BY sales_velocity DESC
LIMIT 5;



~This SQL query identifies the top 5 fast-moving products by calculating their sales velocity. 
~It uses two CTEs: last_6_months_data filters sales data for the last 6 months using DATE_SUB and INTERVAL.
~product_sales_summary then aggregates this data, calculating total_units_sold, active_selling_days (using COUNT(DISTINCT Date)), and sales_velocity (Total Units Sold / Active Selling Days, with NULLIF to prevent division by zero). 
~Finally, it orders products by sales_velocity in descending order and returns the top 5, rounded to two decimal places using ROUND.


















Q2) Detect the Bottom 5 Slow-Moving Products with High Inventory Levels
Write a solution to identify the 5 slowest-moving products that have high inventory levels. 
For each product, calculate the inventory-to-sales ratio as (Inventory Level / Units Sold) and return the ones with the highest ratio, excluding products with zero sales.


 
 
WITH latest_inventory AS (
    SELECT 
        Product_ID,
        Inventory_Level,
        ROW_NUMBER() OVER (PARTITION BY Product_ID ORDER BY Date DESC) AS rn
    FROM final_fact
),
clean_inventory AS (
    SELECT Product_ID, Inventory_Level
    FROM latest_inventory
    WHERE rn = 1
),
sales_summary AS (
    SELECT 
        Product_ID,
        SUM(Units_Sold) AS total_units_sold
    FROM final_fact
    GROUP BY Product_ID
),
combined AS (
    SELECT 
        s.Product_ID,
        c.Inventory_Level,
        s.total_units_sold,
        c.Inventory_Level / NULLIF(s.total_units_sold, 0) AS inventory_to_sales_ratio
    FROM sales_summary s
    JOIN clean_inventory c ON s.Product_ID = c.Product_ID
    WHERE s.total_units_sold > 0
)
SELECT 
    Product_ID,
    Inventory_Level,
    total_units_sold,
    ROUND(inventory_to_sales_ratio, 4) AS inventory_to_sales_ratio
FROM combined
ORDER BY inventory_to_sales_ratio DESC
LIMIT 5;




~This SQL query identifies the 5 slowest-moving products with high inventory levels by calculating their inventory_to_sales_ratio.
~It uses CTEs: latest_inventory and clean_inventory to accurately fetch the most recent Inventory_Level using ROW_NUMBER() for each Product_ID. 
~sales_summary calculates total_units_sold. These are combined to compute the ratio, excluding products with total_units_sold = 0 using NULLIF and a WHERE clause.
~Finally, it ranks and returns the top 5 products with the highest ratio, rounded to four decimal places.















Q3) Classify All Products as ‘Fast-Moving’ or ‘Slow-Moving’
Write a solution to classify products into 'Fast-Moving' or 'Slow-Moving' based on a threshold 

 
 
WITH product_stats AS (
    SELECT 
        Product_ID,
        
        SUM(Units_Sold) AS total_quantity,
        COUNT(DISTINCT CASE WHEN Date >= DATE_SUB('2024-01-01', INTERVAL 30 DAY) THEN Date END) AS days_sold_last_30,
        SUM(Units_Sold) / NULLIF(DATEDIFF(MAX(Date), MIN(Date)), 0) AS daily_sale_rate,
        RANK() OVER (ORDER BY SUM(Units_Sold) DESC) AS quantity_rank,
        COUNT(*) OVER () AS total_products,
        AVG(SUM(Units_Sold)) OVER () AS avg_quantity,
        STDDEV(SUM(Units_Sold)) OVER () AS stddev_quantity
    FROM final_fact
    WHERE Date >= DATE_SUB('2024-01-01', INTERVAL 1 YEAR)
    GROUP BY Product_ID
),

threshold_calc AS (
    SELECT 
        AVG(daily_sale_rate) + STDDEV(daily_sale_rate) AS threshold_rate,
        AVG(total_quantity) AS avg_quantity,
        AVG(total_quantity) + STDDEV(total_quantity) AS high_quantity_threshold
    FROM product_stats
    WHERE daily_sale_rate > 0
)

SELECT 
    p.Product_ID,
    p.total_quantity,
    p.daily_sale_rate,
    t.threshold_rate,
    t.avg_quantity,
    t.high_quantity_threshold,
    CASE 
        WHEN p.daily_sale_rate >= t.threshold_rate 
             AND p.total_quantity >= t.avg_quantity THEN 'Fast-Moving'
        ELSE 'Slow-Moving'
    END AS movement_category,
    CASE 
        WHEN p.quantity_rank <= p.total_products*0.2 THEN 'Top 20%'
        WHEN p.quantity_rank <= p.total_products*0.5 THEN 'Middle 30%'
        ELSE 'Bottom 50%'
    END AS performance_segment,
    CASE
        WHEN p.total_quantity >= t.high_quantity_threshold THEN 'High Volume'
        WHEN p.total_quantity >= t.avg_quantity THEN 'Medium Volume'
        ELSE 'Low Volume'
    END AS volume_category,
    ROUND((p.quantity_rank/p.total_products)*100, 2) AS percentile_rank
FROM product_stats p
CROSS JOIN threshold_calc t
ORDER BY 
    p.total_quantity DESC,
    p.daily_sale_rate DESC;






~This comprehensive SQL query classifies products as 'Fast-Moving' or 'Slow-Moving' and segments them by volume and performance.
~The product_stats CTE calculates total sales, active selling days in the last 30, and daily_sale_rate (using DATEDIFF to determine the sales period) over the last year, 
~along with ranking and overall statistics (AVG, STDDEV) using window functions.
~The threshold_calc CTE dynamically sets classification thresholds based on the average and standard deviation of daily sale rate and total quantity. 
~Finally, the main query applies CASE statements to categorize products based on these calculated thresholds and ranks, providing detailed insights for inventory management.




